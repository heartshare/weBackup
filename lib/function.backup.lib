#!/bin/bash
#	Backup function library for Backup Script 
#
#	Version: 0.5

# backup (  )
# The main backup function. Tass!
function backup() {
	
	if [[ ! $(ls -A $CONF_DIR) ]]; then
		echo ""
		echo "No host file specified in '$CONF_DIR'"
		echo "Stopping backup"
		echo ""
		exit
	fi

	if [ $VERBOSE -eq 1 ]; then
	  log "Backup local disk: $BACKUP_DIR" 1
		log "Backup local conf: $CONF_DIR" 1
		log "Log file         : $LOG" 1
		echo "" #???
	
		log "Hosts:"
		for host in `ls $CONF_DIR`
		do
		  #ignore the template file plz
		  if [ $host == 'template.tpl' ]; then
		    continue
	    fi
		  test_conf_dir $host
			log "> $host"
		done
		log ""
		
		echo -n "Startin backup"
		backup_delay $DELAY 1
	else
		backup_delay $DELAY 0
	fi

	for host in `ls $CONF_DIR`
	do
	  #ignore the template file plz
	  if [ $host == 'template.tpl' ]; then
	    continue
    fi
    mounted=false #I want to be sure of it at this point of the script :)
	  test_conf_dir $host
	  . ${CONF_DIR}/${host}/host.conf
	  
	  if ${servconf[0]}; then #if remote
  	  user="${servconf[1]}@" #set the proper username
	  else #if local
	    user="" #no username needed
    fi
	  
		if [ $VERBOSE -eq 1 ]; then
			log "Inizio Backup per: $host\n" 1
			log ""
		fi
		
		if [ ! $DEBUG -eq 1 ]; then
			dest_dir $host
		else
		  if ${servconf[0]}; then #if remote
			  log ">> rdiff-backup --print-statistics --verbosity $RDIFF_VERBOSITY --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf --exclude / ${user}${host}::/ ${BACKUP_DIR}/${host}"
			  log ""
			  rdiff-backup --test-server ${user}${host}::/ | tee -a $LOG
			  log ""
		  else #if local
        if ${servconf[3]}; then
          mount_sshfs ${user}${host}::/ ${servconf[2]}
        fi
		    log "rdiff-backup --print-statistics --verbosity $RDIFF_VERBOSITY --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf ${servconf[2]} ${BACKUP_DIR}/${host}"
		    log ""
		    rdiff-backup --test-server ${servconf[2]} | tee -a $LOG
		    log ""
	    fi
		fi
		
		#if NOT DEBUG
		if [ ! $DEBUG -eq 1 ]; then
		  #If verbose AND remote
			if [ $VERBOSE -eq 1 ] && ${servconf[0]}; then
				rdiff-backup --print-statistics --verbosity $RDIFF_VERBOSITY --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf --exclude / ${user}${host}::/ ${BACKUP_DIR}/${host} 2>&1 | tee -a $LOG
				rdiff-backup --force --remove-older-than ${RETENTION} ${BACKUP_DIR}/${host} 2>&1 | tee -a $LOG
				log ""
			#else if verbose AND local
			elif [ $VERBOSE -eq 1 ] && ! ${servconf[0]}; then
			  if ${servconf[3]}; then
          mount_sshfs ${user}${host}:${servconf[4]} ${servconf[2]}
        fi
			  rdiff-backup --print-statistics --verbosity $RDIFF_VERBOSITY --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf ${servconf[2]} ${BACKUP_DIR}/${host} 2>&1 | tee -a $LOG
				rdiff-backup --force --remove-older-than ${RETENTION} ${BACKUP_DIR}/${host} 2>&1 | tee -a $LOG
		  else # else if NOT verbose
			  if ${servconf[0]}; then #if remote
				  rdiff-backup --verbosity $RDIFF_VERBOSITY --print-statistics --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf --exclude / ${user}${host}::/ ${BACKUP_DIR}/${host} 2>&1 >> tee $LOG
				  rdiff-backup --force --remove-older-than ${RETENTION} ${BACKUP_DIR}/${host} 2>&1 >> tee $LOG
				  log ""
			  else #if local
			    if ${servconf[3]}; then
            mount_sshfs ${user}${host}:${servconf[4]} ${servconf[2]}
          fi
			    rdiff-backup --verbosity $RDIFF_VERBOSITY --print-statistics --include-globbing-filelist ${CONF_DIR}/${host}/globbing.conf ${servconf[2]} ${BACKUP_DIR}/${host} 2>&1 >> tee $LOG
				  rdiff-backup --force --remove-older-than ${RETENTION} ${BACKUP_DIR}/${host} 2>&1 >> tee $LOG
			  fi
			fi
		fi
				
		if $mounted; then
		  `which fusermount` -u ${servconf[2]}
		  mounted=false
	  fi
		log "" #???
	done
}

# test_conf_dir ( host )
# Test if the needed config files exist
function test_conf_dir(){
  if [ ! -f ${CONF_DIR}/$1/globbing.conf ] || [ ! -f ${CONF_DIR}/$1/host.conf ]; then
    log "> Missing configuration files for host ${1}. Aborting"
    exit 1
  fi
  
  return 0
}

# dest_dir ( string name )
# Test if backup destination directory exists and if not
#+create it.
function dest_dir() {
	local dir=${BACKUP_DIR}/${1}
	
	if [ -d $dir ]; then
		if [ $VERBOSE -eq 1 ]; then
			echo "> Backup directory for host exists" | tee -a $LOG
		fi
	else
		if [ $VERBOSE -eq 1 ]; then
			echo "> Backup directory for host does not exists; creating..." | tee -a $LOG
		fi
		
		mkdir $dir
		
		if [ -d $dir ]; then
			if [ $VERBOSE -eq 1 ]; then
				echo "> Created: "$dir | tee -a $LOG
			fi
		else
			echo "> FAILED! Backup ABORTED ( err: "$?" )" | tee -a $LOG
			exit $?
		fi
	fi
	
	return 0
}

# delay ( int time, bool stdout )
function backup_delay() {
	local delay_time=$1
	local stdout=$2
	
	for i in `seq $delay_time -1 1`
	do
		if [ $stdout -eq 1 ]; then
			echo -e -n "."
		fi
		sleep 1
	done
	
	if [ $stdout -eq 1 ]; then
		echo -e "\n"
	fi
}

# mount_sshfs ( user@host:dir mountpoint )
# This function will be valid only inside backup() function
#+due to use of certain variables setted there...
function mount_sshfs(){
  if ${servconf[0]}; then
    if ${servconf[3]}; then
      [[ `which sshfs` ]] || log "ERROR: sshfs is not installed on the system. Aborting... \n try apt-get install sshfs" 1; exit 1
      [[ ! -d ${servconf[2]} ]] && mkdir ${servconf[2]}
      `which sshfs` ${user}${host}:${servconf[4]} ${servconf[2]}
      
      if [[ $? == 0 ]]; then
        log "ERROR: mount of the remote filesystem went bad; problem probably genereted remotly. Aborting"
        exit 1
      fi
      mountpoint ${servconf[2]} #double control of the mount is paranoic?
      if [[ $? != 0 ]]; then
        log "ERROR: mount of the remote filesystem went bad; problem probably genereted remotly. Aborting"
        exit 1
      else
        #At the end of the backup process we'll need a quick way to verify is the dir is alredy
        #+mounted to unmount it before process another host/dir
        mounted=true
      fi
      return 0
    fi
  fi
}

